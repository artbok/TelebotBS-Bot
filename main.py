import telebot
from telebot import types
from User import UserRepository, User
from datetime import datetime
from threading import Timer 
import yaml 
import requests
import json
import random
import math

#–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞

def selectModeOnLaunching():
    global folder
    mode = input("Select launch mode: \nTestMode - Enter | MainMode: MM\nMode: ")
    if mode == "": folder = "storage2\\"; print("You have selected TestMode")
    elif mode == "MM": folder = "storage\\"; print("You have selected MainMode")
    else: print("I don't understand you\n"); selectModeOnLaunching()
selectModeOnLaunching()

#–ß—Ç–µ–Ω–∏–µ/–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

def openFile(file):
    with open(folder + file, encoding="utf-8") as file:
        return yaml.safe_load(file)

def saveFile(file, data):
    with open(folder + file, "w", encoding="utf-8") as f:
        yaml.dump(data, f, sort_keys=False, allow_unicode=True)

lang = openFile("lang.yaml") 
settings = openFile("settings.yaml")
teams = openFile("teams.yaml")
blacklist = openFile("blacklist.yaml")
adminlist = openFile("adminlist.yaml")
token = openFile("tokens.yaml")
message = openFile("messages.yaml")

#–ë–æ—Ç—ã

LoggerBot = telebot.TeleBot(token["LoggerBotToken"], skip_pending=True)
bot = telebot.TeleBot(token["BotToken"], skip_pending=True)

#–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

adminchat = token["adminchat"]
chat = token["chat"]
CheckList = []
GameIDs = set()
timeTasks = {}
suggestionsToPlay = {}
battleDay = False
userRepository = UserRepository().load(settings) #–ø—Ä–æ–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–ª—É–±–∞

#–§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø

def botLogging(id, action):
    if id is int and id > 0: 
        if id in settings['userlist']: log = "<b>" + datetime.now().strftime("%H:%M:%S") + " | ü§ñ --> üë§ </b>(<code>"+ str(id) + "</code>) | " + action
        else: settings['userlist']: log = "<b>" + datetime.now().strftime("%H:%M:%S") + " | ü§ñ --> üë§</b> <code>"+ str(id) + "</code> | " + action
    else: log = "<b>" + datetime.now().strftime("%H:%M:%S") + " | ü§ñ --> üë§ </b> <code>" + str(id) + "</code> | " + action
    LoggerBot.send_message(1193654237, log, parse_mode="HTML")


#–§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–û–í –í–†–ï–ú–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô

def dayStart(day):
    loadGames(); teamlists = ""
    for i in teams.keys():
        if teams[i]["users"][0] != teams[i]["users"][1] and teams[i]["users"][0] != teams[i]["users"][2]: 
            teamlists += "\n–ö–æ–º–∞–Ω–¥–∞ ‚Ññ" + str(i) + ": "
            for id in teams[i]["users"]:
                if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                    if day == "Wed" or day == "Fri": CheckList.append([id, 2])
                    else: CheckList.append([id, 3])
                    user: User = userRepository.get(id)
                    user.t_Dict = {**{str(i): [["", "00"], ["", "20"], ["", "40"]] for i in range(17, 24)}, **{str(j): [["", "00"], ["", "20"], ["", "40"]] for j in range(8, 17)}}
                    user.t_MessageID = bot.send_message(id, message['DayStartPersonal'], reply_markup=genMarkup(id)).message_id
                    print(user.t_MessageID)
                    teamlists += "\n   - <a href='tg://user?id=" + str(id) + "'>" + user.nickname + "</a>"
    bot.send_message(chat, message['DayStartChat'].format(teams=teamlists), parse_mode="HTML")
    botLogging("chat", "DayStart_func"); saveFile("settings.yaml", settings); saveFile("teams.yaml", teams)


def checkTable():
    global battleDay
    battleDay = True
    for i in teams.keys():
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(id)
                user.t_Dict = {}
                if teams[i]["time"] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" and user.t_GameByInvitation is False:
                    user.t_GameByInvitation = True
                    bot.send_message(adminchat, message["NotAnsweredReport"].format(id=id, nickname=user.nickname), parse_mode="HTML")
                    bot.send_message(id, message["NotAnswered"], reply_markup=setKeyboard(id))
                    bot.edit_message_text(chat_id=id, message_id=user.t_MessageID, text=message["DelTable"])
    botLogging("chat", "CheckTable_func"); saveFile("settings.yaml", settings)    


def endOfTheDay():
    global battleDay
    battleDay = False
    raiting = ""
    leaderList = {}
    for i in range(1, 11):
        teams[i]['time'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(id)
                user.times = []
                if settings['user'][id]['WeeklyTrophies'] not in leaderList:
                    leaderList[settings['user'][id]['WeeklyTrophies']] = [settings['user'][id]['Nickname']]
                else:
                    leaderList[settings['user'][id]['WeeklyTrophies']].append(settings['user'][id]['Nickname'])
    saveFile("settings.yaml", settings)   
    saveFile("teams.yaml", teams)   
    sorted(leaderList.keys(), reverse=True)
    position = 1
    for i in sorted(leaderList.keys(), reverse=True):
        raiting += "\n<b>" + str(position) + " –º–µ—Å—Ç–æ (" + str(i) + " –æ—á–∫–æ–≤)</b>: "
        for j in leaderList[i]:
            raiting += j + ", "
        raiting = raiting[:len(raiting)-2]; position += 1
    botLogging("chat", "EndOfTheDay_func")
    bot.send_message(chat, message["EndOfTheDayChat"].format(points=settings["ClubTrophies"], leaderList=raiting), parse_mode="HTML")

#–û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ë–û–Å–í

def MatchTracking():
    global CheckList
    CheckList2 = []
    for i in CheckList:
        id = i[0]
        url = 'https://api.brawlstars.com/v1/players/%23' + settings["user"][id]["Tag"] + "/battlelog"
        r = requests.get(url, headers={'Authorization': token["AuthKey"]})
        data = json.loads(r.text)
        for game in data["items"]:
            if game["battleTime"] == settings['user'][id]["LastCheckedGame"]: break
            if "type" in game["battle"] and game["battle"]["type"] == "teamRanked" and "trophyChange" in game["battle"]:
                settings['user'][id]['DailyTrophies'] += game["battle"]["trophyChange"]
                settings['user'][id]['WeeklyTrophies'] += game["battle"]["trophyChange"]
                settings['user'][id]['TotalTrophies'] += game["battle"]["trophyChange"]
                settings['ClubTrophies'] += game["battle"]["trophyChange"]
                if game["battleTime"] not in GameIDs:
                    GameIDs.add(game["battleTime"])
                    if game["battle"]["result"] == "victory": text = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –º–∞—Ç—á–µ</b> \n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>–ü–û–ë–ï–î–ê (+" + str(game["battle"]["trophyChange"]) + "üèÜ)</b> \n–†–µ–∂–∏–º: <b>" + game["event"]["mode"] + "</b>\n–ö–∞—Ä—Ç–∞: <b>" + game["event"]["map"] + "</b>" + "\n–ó–≤—ë–∑–¥–Ω—ã–π –∏–≥—Ä–æ–∫: <b>" + delHTML(game["battle"]["starPlayer"]["name"]) + "\n–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥: </b>"
                    else: text = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –º–∞—Ç—á–µ</b> \n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>–ü–û–†–ê–ñ–ï–ù–ò–ï (+" + str(game["battle"]["trophyChange"]) + "üèÜ)</b> \n–†–µ–∂–∏–º: <b>" + game["event"]["mode"] + "</b>\n–ö–∞—Ä—Ç–∞: <b>" + game["event"]["map"] + "</b>" + "\n–ó–≤—ë–∑–¥–Ω—ã–π –∏–≥—Ä–æ–∫: <b>" + delHTML(game["battle"]["starPlayer"]["name"]) + "\n–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥: </b>"
                    for j in range(0, 3): 
                        text += "\nüü¶ <b>" + delHTML(game["battle"]["teams"][0][j]["name"]) + "</b> (<code>" + game["battle"]["teams"][0][j]["tag"]  + "</code>), <b>" + lang[game["battle"]["teams"][0][j]["brawler"]["name"]] + "(" + str(game["battle"]["teams"][0][j]["brawler"]["power"]) + " —É—Ä.)</b>"
                    for j in range(0, 3):
                        text += "\nüü• <b>" + delHTML(game["battle"]["teams"][1][j]["name"]) + "</b> (<code>" + game["battle"]["teams"][1][j]["tag"]  + "</code>), <b>" + lang[game["battle"]["teams"][1][j]["brawler"]["name"]] + "(" + str(game["battle"]["teams"][1][j]["brawler"]["power"]) + " —É—Ä.)</b>"
                    bot.send_message(chat, text, parse_mode="HTML")
                    botLogging(id, "MatchInfo")
                if i[1] != 1: i[1] -= 1
                else: i = None
        if i != None: CheckList2.append(i)
        settings['user'][id]["LastCheckedGame"] = data["items"][0]["battleTime"]    
        saveFile("settings.yaml", settings)
    CheckList = CheckList2

def loadGames():
    for i in teams.keys():
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                url = 'https://api.brawlstars.com/v1/players/%23' + settings["user"][id]["Tag"] + "/battlelog"
                r = requests.get(url, headers={'Authorization': token["AuthKey"]})
                data = json.loads(r.text)
                settings['user'][id]["LastCheckedGame"] = data["items"][0]["battleTime"]    
    saveFile("settings.yaml", settings)

#–¶–ò–ö–õ–ò–ß–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø

def check():
    Timer(60, check).start()
    date = datetime.now().strftime('%a/%H:%M')
    week = int(datetime.now().strftime('%W')) % 2
    #if (date == 'Wed/08:00' or date == 'Fri/08:00' or date == 'Sun/08:00') and week == 1: dayStart(date[:3])
    if (date == 'Wed/16:50' or date == 'Fri/16:50' or date == 'Sun/16:50') and week == 1: checkTable()
    elif (date == 'Thu/17:05' and week == 1) or (date == 'Sat/17:05' and week == 1) or (date == 'Mon/17:05' and week == 0): endOfTheDay()    
    date = datetime.now().strftime('%H:%M')
    if date in timeTasks:
        for i in timeTasks[date]:
            if i[1] == "Remind":
                for id in teams[i[0]]["users"]:
                    if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                        bot.send_message(id, "<b>–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –≤—ã —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –ø–æ–π—Ç–∏ –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É!</b>", parse_mode="HTML")
                        botLogging(id, "Team " + str(i[0]) + ": AdvanceReminder")
                timeTasks[date].remove(i)
            else:
                suggestToPlay(i[0], None)
                botLogging("Team " + str(i[0]), "GameReminder")
                timeTasks[date].remove(i)
            if len(timeTasks[date]) == 0: del timeTasks[date]
    MatchTracking()

#–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í

def permission(id):
    if id == 1193654237: return "Owner"
    elif id in adminlist: return "Admin"
    elif id in settings['userlist']: return "Member"
    else: return "User"

#–£–°–¢–ê–ù–û–í–ö–ê –ö–õ–ê–í–ò–ê–¢–£–†–´

def setKeyboard(id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    role = permission(id)
    if role != "User" and userRepository.get(id).t_GameByInvitation is True: kb.add(types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ö–õ‚öîÔ∏è"))
    if role == "Owner":
        kb.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§"), types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤—É—é —Ä–∞–∑–Ω–∏—Ü—Éüåç"), types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã‚úèÔ∏è"), types.KeyboardButton("DayStart_func"), types.KeyboardButton("CheckTable_func"), types.KeyboardButton("EndOfTheDay_func"))
    elif role == "Admin":
        kb.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§"), types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤—É—é —Ä–∞–∑–Ω–∏—Ü—Éüåç"), types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã‚úèÔ∏è"))
    elif role == "Member":
        kb.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§"), types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤—É—é —Ä–∞–∑–Ω–∏—Ü—Éüåç"))
    else:
        if id not in blacklist: kb.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§"), types.KeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±‚úâÔ∏è"))
        else: kb.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§"))
    return kb

#–ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê

@bot.message_handler(commands=["start"])
def startCMD(message):
    id = message.chat.id
    #userLogging(id, message.from_user.first_name, message.text)
    if id > 0:
        botLogging(id, "StartCMD")
        bot.send_message(id, "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + """. –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—É–±–æ–º ABOBA. –Ø –∏–º–µ—é —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è \n - —Ñ–æ—Ä–º–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä—ã\n - –≤—ã–±–∏—Ä–∞—é –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã –≤ –ö–õ —Å –∫–æ–º–∞–Ω–¥–æ–π
 - –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö \n - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫–ª—É–±–Ω—ã–µ –±–æ–∏\n - –≤–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª—É–±—É\n \n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±‚úâÔ∏è</b> –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. """, parse_mode="HTML", reply_markup=setKeyboard(id))

#–ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–ì–†–û–ö–ï

def delHTML(text):
        text = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        return text

def playerInfo(id):
    user: User = userRepository.get(id)
    user.i_Status = True
    botLogging(id, "WaitingForTheTag")
    bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")

def getUserStats(tag, id):
    user: User = userRepository.get(id)
    url = "https://api.brawlstars.com/v1/players/%23" + tag
    r = requests.get(url, headers={"Authorization": token["AuthKey"]})
    if r.status_code != 200: text = "–ò–≥—Ä–æ–∫ –ø–æ–¥ –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è ID –∏ "
    else:
        data = json.loads(r.text)
        if user.j_Status is True: user.j_Nickname = data["name"]
        text = "üë§ –ù–∏–∫: <b>" + delHTML(data["name"]) + "</b>\nüéÆ ID: <code>" + data["tag"] + "</code>\nüèÜ –¢—Ä–æ—Ñ–µ–∏: <b>" + str(data["trophies"]) + "</b>\nüèÖ –ú–∞–∫—Å. —Ç—Ä–æ—Ñ–µ–µ–≤: <b>" + str(data["highestTrophies"]) + "</b>\n" + "‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: <b>" + str(data["expLevel"])
        if data["club"]: text += "</b>\nüë• –ö–ª—É–±: <b>" + delHTML(data["club"]["name"])
        else: text += "</b>\nüë• –ö–ª—É–±: <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text +=  "</b>\nü•á –ü–æ–±–µ–¥ –≤ —Å–æ–ª–æ: <b>" + str(data["soloVictories"]) + "</b>\nü•à –ü–æ–±–µ–¥ –≤ –¥—É–æ: <b>" + str(data["duoVictories"]) + "</b>\nü•â –ü–æ–±–µ–¥ –≤ —Ç—Ä–∏–æ: <b>" + str(data["3vs3Victories"]) + "</b>\nüèãüèø –ë–æ–π—Ü—ã –Ω–∞ 11 —Å–∏–ª–µ: "
        brawlersAt11Lvl = 0
        brawlersAt10Lvl = 0
        brawlersAt26Rank = 0
        brawlersAt30Rank = 0
        stack = 0
        for i in range(len(data["brawlers"])):
            if data["brawlers"][i]["rank"] >= 30: brawlersAt30Rank += 1
            elif data["brawlers"][i]["rank"] > 25: brawlersAt26Rank += 1
            if data["brawlers"][i]["power"] == 11:
                if stack % 3 == 0: text += "\n        "
                text += "<b>" + lang[data["brawlers"][i]["name"]] + "</b>, "
                brawlersAt11Lvl += 1
                stack += 1
            elif data["brawlers"][i]["power"] == 10: brawlersAt10Lvl += 1
        text = text[:len(text)-2] + "\nüîπ –í—Å–µ–≥–æ 11-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: <b>" + str(brawlersAt11Lvl) + "</b>\nüîπ –í—Å–µ–≥–æ 10-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: <b>" + str(brawlersAt10Lvl) + "</b>\nüî∏ –ë–æ–π—Ü–æ–≤ –Ω–∞ 26-29 —Ä–∞–Ω–≥–µ: <b>" + str(brawlersAt26Rank) + "</b>\nüî∏ –ë–æ–π—Ü–æ–≤ –Ω–∞ 30-35 —Ä–∞–Ω–≥–µ: <b>" + str(brawlersAt30Rank) + "</b>"
    return text

def sendTag(tag, id):
    user: User = userRepository.get(id)
    if user.j_Status is True:
        user.j_Tag = tag
        text = getUserStats(tag, id)
        if text[0] != "–ò":
            blacklist.append(id)
            saveFile("blacklist.yaml", blacklist)
            user.j_Text = text 
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("–ù–ê–ü–ò–°–ê–¢–¨ " + user.j_Nickname, url="tg://user?id=" + str(id)))
            markup.add(types.InlineKeyboardButton(" –ü–†–ò–ù–Ø–¢–¨ ", callback_data="+" + str(id)), types.InlineKeyboardButton(" –û–¢–ö–õ–û–ù–ò–¢–¨ ", callback_data="-" + str(id)))
            bot.send_message(id, "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", reply_markup=setKeyboard(id))
            bot.send_message(adminchat, "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b>\n" + text, parse_mode="HTML", reply_markup=markup)
            user.j_Status = False
            botLogging(id, "Send Application to adminchat")
        else:
            botLogging(id, "Invalid tag")
            bot.send_message(id, text + "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ")
    elif user.i_Status is True:
        text = getUserStats(tag, user)
        user.i_Status = False
        if text[0] != "–ò":
            botLogging(id, "Send info about player")
            bot.send_message(id, "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∏–≥—Ä–æ–∫–µ:</b> \n" + text, parse_mode="HTML", reply_markup=setKeyboard(id))
        else:
            bot.send_message(id, text + "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", reply_markup=setKeyboard(id))
            botLogging(id, "Invalid tag")


#–í–°–¢–£–ü–õ–ï–ù–ò–ï –í –ö–õ–£–ë

def join(id):
    user: User = userRepository.get(id)
    user.i_Status = False
    if id not in blacklist:
        user: User = userRepository.get(id)
        user.j_Status = True
        botLogging(id, "WaitingForTheTag")
        bot.send_message(id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–ª—É–±, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID –∏–∑ –∏–≥—Ä—ã. –ë—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏ –æ–±—â–∏–µ –∫—É–±–∫–∏, –ø–æ–±–µ–¥—ã –≤ —Ç—Ä–∏–æ, —Å–∏–ª–æ–≤–∞—è –ª–∏–≥–∞, –∞ —Ç–∞–∫–∂–µ —Å–∏–ª—ã –±–æ–π—Ü–æ–≤.")
    else:
        botLogging(id, "ApplicationHasBeenSentBefore")
        bot.send_message(id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É —Ä–∞–Ω–µ–µ!", reply_markup=setKeyboard(id))


def acceptApplication(callID, chatID, messageID, name, id): #–ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å –∏ –û—Ç–∫–ª–æ–Ω–∏—Ç—å
    user: User = userRepository.get(id)
    bot.answer_callback_query(callID, text="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–ê–ü–ò–°–ê–¢–¨ " + user.j_Nickname, url="tg://user?id=" + str(id)))
    bot.edit_message_text(chat_id=chatID, message_id=messageID, text="<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b> \n" + user.j_Text +"\n<b>–ü—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " + name + "</b>", parse_mode="HTML", reply_markup=markup)
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(" –ö–ª—É–± ", url="https://link.brawlstars.com/invite/band/ru?tag=28U82UGGV&token=2rfhzttd")
    btn2 = types.InlineKeyboardButton(" –ë–µ—Å–µ–¥–∞ –∫–ª—É–±–∞ ", url="https://t.me/+vp-n9-uL01VhZmUy")
    markup.add(btn1, btn2)
    settings["userlist"].append(id)
    settings["user"][id] = {"Tag": user.j_Tag, "Nickname": user.j_Nickname, "Team": 0, "TimeZoneDifference": 0, "DailyTrophies": 0, "WeeklyTrophies": 0, "TotalTrophies": 0, "LastCheckedGame": "Netu"}
    saveFile("settings.yaml", settings)
    botLogging(id, "Application has been accepted")
    userRepository.load(settings)
    user.loadProfile(user.j_Tag, user.j_Nickname, 0, 0)
    bot.send_message(id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ <b>–ø—Ä–∏–Ω—è—Ç–∞</b>!", reply_markup=setKeyboard(id), parse_mode="HTML")
    bot.send_message(id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –∫–ª—É–±. –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–± –∏ –≤ –≥—Ä—É–ø–ø—É –∫–ª–∞–Ω–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n", reply_markup=markup, parse_mode="HTML")
    user.j_Nickname, user.j_Tag, user.j_Text = None, None, None


def denyApplication(callID, chatID, messageID, name, id):
    user: User = userRepository.get(id)
    bot.answer_callback_query(callID, text="–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–ê–ü–ò–°–ê–¢–¨ " + user.j_Nickname, url="tg://user?id=" + str(id)))
    bot.edit_message_text(chat_id=chatID, message_id=messageID, text="<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b> \n" + user.j_Text +"\n<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " + name + "</b>", parse_mode="HTML", reply_markup=markup)
    bot.send_message(id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.", parse_mode="HTML")
    botLogging(id, "Application has been declined")

#–°–ú–ï–ù–ê –ß–ê–°–û–í–û–ô –†–ê–ó–ù–ò–¶–´

def selectHourDifference(id):
    userRepository.get(id).i_Status = False
    markup = types.InlineKeyboardMarkup(row_width=6)
    differences = [['-14', '-13', '-12', '-11', '-10', '-9'], ['-8', '-7', '-6', '-5', '-4', '-3'], ['-2', '-1', '0', '+1', '+2', '+3'], ['+4', '+5', '+6', '+7', '+8', '+9']]
    for i in differences:
        markup.add(types.InlineKeyboardButton(i[0], callback_data="1"+i[0]), types.InlineKeyboardButton(i[1], callback_data="1"+i[1]), types.InlineKeyboardButton(i[2], callback_data="1"+i[2]), types.InlineKeyboardButton(i[3], callback_data="1"+i[3]), types.InlineKeyboardButton(i[4], callback_data="1"+i[4]), types.InlineKeyboardButton(i[5], callback_data="1"+i[5]))
    bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤—É—é —Ä–∞–∑–Ω–∏—Ü—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã(0).", reply_markup=markup)


def saveHourDifference(id, hourDifference, messageID):
    user: User = userRepository.get(id)
    user.timeZone = int(hourDifference)
    settings["user"][id]["TimeZoneDifference"] = user.timeZone
    saveFile("settings.yaml", settings)
    botLogging(id, "SetHourDif: " + hourDifference)
    bot.delete_message(id, messageID)
    bot.send_message(id, "–í–∞—à–∞ —á–∞—Å–æ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>" + hourDifference + "</b>. –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å <b>" + visualTime(int(datetime.now().strftime('%H')), user.timeZone) + datetime.now().strftime(':%M') + "</b> –≤–µ—Ä–Ω–æ?", parse_mode="HTML", reply_markup=setKeyboard(id))

#–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î 

def editTeams(id):
    user: User = userRepository.get(id)
    user.i_Status = False
    user.editteams()
    markup = types.InlineKeyboardMarkup(row_width=2)
    text = '<b>–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
    for i in range(1, 11):
        text += '\n<b>–ö–æ–º–∞–Ω–¥–∞ ' + str(i) + ': </b>' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][0] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][0]]["Nickname"]) + ', '
        text += ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][1] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][1]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][2] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][2]]["Nickname"])
    for i in range(1, 11, 2):
        markup.add(types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i), callback_data='5' + str(i)), types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i+1), callback_data='5' + str(i+1)))
    botLogging(id, "EditTeamsCMD")
    bot.send_message(id, text, reply_markup=markup, parse_mode='HTML')

def choosePlayer(id, selTeam, messageID): #–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    user: User = userRepository.get(id)
    user.e_selectedTeam = selTeam
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(3):
        if teams[user.e_selectedTeam]['users'][i] != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            markup.add(types.InlineKeyboardButton(settings["user"][teams[user.e_selectedTeam]['users'][i]]["Nickname"], callback_data='6' + str(i)))
        else:
            markup.add(types.InlineKeyboardButton("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ", callback_data='6' + str(i)))
    bot.edit_message_text(chat_id=id, message_id=messageID, text='–ö–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)


def userToChange(id, selUser, messageID): #–∑–∞–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
    user: User = userRepository.get(id)
    user.e_selectedUser = selUser
    n = len(settings['userlist'])
    markup = types.InlineKeyboardMarkup(row_width=3)
    if n >= 3:
        for i in range(0, (n - n % 3), 3):
            markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][i]]["Nickname"], callback_data='7' + str(settings['userlist'][i])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+1]]["Nickname"], callback_data='7' + str(settings['userlist'][i+1])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+2]]["Nickname"], callback_data='7' + str(settings['userlist'][i+2])))
    if n % 3 == 2:
        markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][n-2]]["Nickname"], callback_data='7' + str(settings['userlist'][n-2])), types.InlineKeyboardButton(settings["user"][settings['userlist'][n-1]]["Nickname"], callback_data='7' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='7' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))
    elif n % 3 == 1:
        markup.add(types.InlineKeyboardButton(settings['user'][settings['userlist'][n-1]]['Nickname'], callback_data='7' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='7' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))    
    else:
        markup.add(types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='7' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))
    bot.edit_message_text(chat_id=id, message_id=messageID, text='–ù–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[user.e_selectedTeam]["users"][user.e_selectedUser] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings['user'][teams[user.e_selectedTeam]["users"][user.e_selectedUser]]['Nickname']) + '?', reply_markup=markup)


def changeResult(id, replacement, messageID): #—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã
    user: User = userRepository.get(id)
    if replacement != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": user.e_replacement = int(replacement) 
    else: user.e_replacement = replacement
    if teams[user.e_selectedTeam]['users'][user.e_selectedUser] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
        if user.e_replacement == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
        else:
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>' + settings['user'][user.e_replacement]["Nickname"] + '\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user2: User = userRepository.get(user.e_replacement)
            if user2.team != 0: teams[user2.team]["users"][teams[user2.team]["users"].index(user.e_replacement)] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            user2.team = user.e_selectedTeam
            settings['user'][user.e_replacement]["Team"] = user.e_selectedTeam
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = user.e_replacement
    else:
        if user.e_replacement == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Nickname"] + '</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user1: User = userRepository.get(teams[user.e_selectedTeam]['users'][user.e_selectedUser])
            user1.team = 0
            settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Team"] = 0
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        else:
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Nickname"] + '</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>' + settings['user'][user.e_replacement]["Nickname"] + '\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user1: User = userRepository.get(teams[user.e_selectedTeam]['users'][user.e_selectedUser])
            user1.team = 0
            settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Team"] = 0
            user2: User = userRepository.get(user.e_replacement)
            if user2.team != 0: teams[user2.team]["users"][teams[user2.team]["users"].index(user.e_replacement)] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            user2.team = user.e_selectedTeam
            settings['user'][user.e_replacement]["Team"] = user.e_selectedTeam
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = user.e_replacement
    saveFile("settings.yaml", settings)
    saveFile("teams.yaml", teams)
    for i in range(1, 11):
        text += '\n<b>–ö–æ–º–∞–Ω–¥–∞ ' + str(i) + ': </b>' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][0] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][0]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][1] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][1]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][2] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][2]]["Nickname"])
    bot.edit_message_text(chat_id=id, message_id=messageID, text=text, parse_mode="HTML")
    botLogging(id, "EditTeams: Result: " + text)
    user.editteams()
    user.e_Status = False

#–ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ò–õ–Ø
# def userSettings(id):
#     markup = types.InlineKeyboardMarkup(row_width=4)
#     "<b>–ù–ê–°–¢–†–û–ô–ö–ê –í–ê–®–ï–ì–û –ü–†–û–§–ò–õ–Ø:<b>"
#     markup.add(types.InlineKeyboardButton("–ö–ê–ñ–î–´–ô –ú–ê–¢–ß" + "–í–ö–õ", callback_data='a')
#–í–´–ë–û–† –í–†–ï–ú–Å–ù

def visualTime(hour, td):
    hour += td
    if hour > 23: hour -= 24 
    if hour < 0: hour += 24
    if len(str(hour)) == 1: return "0" + str(hour)
    return str(hour)


def genMarkup(id):
    user: User = userRepository.get(id)
    markup = types.InlineKeyboardMarkup(row_width=4)
    n = 0
    for h in user.t_Dict.keys():
        vHour = visualTime(int(h), user.timeZone)
        if len(user.t_Dict[h]) == 1: markup.add(types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][0][0] != '' else '') + vHour + ":" + user.t_Dict[h][0][1], callback_data='3' + str(h) + "0"))
        elif len(user.t_Dict[h]) == 2: markup.add(types.InlineKeyboardButton(vHour, callback_data='2' + str(h)), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][0][0] != '' else '') + vHour + ":" + user.t_Dict[h][0][1], callback_data='3' + str(h) + "0"), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][1][0] != '' else '') + vHour + ":" + user.t_Dict[h][1][1], callback_data='3' + str(h) + "1"))
        else: markup.add(types.InlineKeyboardButton(vHour, callback_data='2' + str(h)), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][0][0] != '' else '') + vHour + ":" + user.t_Dict[h][0][1], callback_data='3' + str(h) + "0"), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][1][0] != '' else '') + vHour + ":" + user.t_Dict[h][1][1], callback_data='3' + str(h) + "1"), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][2][0] != '' else '') + vHour + ":" + user.t_Dict[h][2][1], callback_data='3' + str(h) + "2"))
        n += len(user.t_Dict[h])
    markup.add(types.InlineKeyboardButton('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω', callback_data='8'))
    # flag = True
    # for i in teams[user.team]["users"]:
    #     if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" and i != id: 
    #         user2: User = userRepository.get(i)
    #         if user2.t_SelectedTimes == set(): flag = False 
    # if flag is False:
    if user.t_Counter >= math.ceil(n / 6): markup.add(types.InlineKeyboardButton('–°–û–•–†–ê–ù–ò–¢–¨', callback_data='4'))
    else: markup.add(types.InlineKeyboardButton('–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –º–∏–Ω–∏–º—É–º ' + str(math.ceil(n / 6) - user.t_Counter), callback_data="0"))
    return markup


def selectRowClick(id, h, messageID):
    user: User = userRepository.get(id)
    flag = False
    for i in user.t_Dict[h]:
        if i[0] == '‚úÖ': 
            flag = True
            break
    if flag is True:
        for i in range(len(user.t_Dict[h])):
            if user.t_Dict[h][i][0] == '‚úÖ':
                user.t_Dict[h][i][0] = ''
                user.t_Counter -= 1
    else:
        for i in range(len(user.t_Dict[h])):
            if user.t_Dict[h][i][0] == '':
                user.t_Dict[h][i][0] = '‚úÖ' 
                user.t_Counter += 1   
    bot.edit_message_reply_markup(chat_id=id, message_id=messageID, reply_markup=genMarkup(id))       


def selectTimeClick(id, h, m, messageID): 
    user: User = userRepository.get(id)
    if user.t_Dict[h][m][0] == '':
        user.t_Dict[h][m][0] = '‚úÖ'
        user.t_Counter += 1
    else:
        user.t_Dict[h][m][0] = ''
        user.t_Counter -= 1    
    bot.edit_message_reply_markup(chat_id=id, message_id=messageID, reply_markup=genMarkup(id))


def findCommonTime(id, team):
    everyoneAnswered = True
    playersTimes = []
    for i in teams[team]["users"]:
        if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            user: User = userRepository.get(i)
            if len(user.t_SelectedTimes) != 0: playersTimes.append(user.t_SelectedTimes)
            elif i != id: everyoneAnswered = False
    if len(playersTimes) == 1: time = sorted(list(playersTimes[0]))
    elif len(playersTimes) == 2: time = sorted(list(playersTimes[0] & playersTimes[1]))
    else: time = sorted(list(playersTimes[0] & playersTimes[1] & playersTimes[2]))
    if everyoneAnswered is False and time != []:
        table = {}
        for t in time:
            h, m = t[:2], t[3:]
            if int(h) > 16:
                if h not in table: table[h] = [["", m]]
                else: table[h].append(["", m])
        for t in time:
            h, m = t[:2], t[3:]
            if int(h) < 17:
                if h not in table: table[h] = [["", m]]
                else: table[h].append(["", m])
        for i in teams[team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(i)
                print(i, user.t_Counter, user.t_Dict, table)
                if user.t_Counter == 0 and i != id and user.t_Dict != table:
                    user.t_Dict = table
                    bot.edit_message_text(chat_id=i, message_id=user.t_MessageID, text="–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –¥–µ–Ω—å –∫–ª—É–±–Ω–æ–π –ª–∏–≥–∏! –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!", reply_markup=genMarkup(i))
        return
    if everyoneAnswered is False and time == []:
        for i in teams[team]["users"]:
            user: User = userRepository.get(i)
            if len(user.t_SelectedTimes) == 0: bot.edit_message_text(chat_id=i, message_id=user.t_MessageID, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ –∑–Ω–∞—á–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç.")
    if time != []:
        time = random.choice(time)
        teams[team]["time"] = time
        if time not in timeTasks: timeTasks[time] = [[team, "Game"]]
        else: timeTasks[time].append([team, "Game"])
        h, m = time[:2], time[3:]
        if m == "00":
            m = "40"
            h = str(int(h)-1)
            if len(h) == 1: h = "0" + h
        elif m == "20": m = "00"
        else: m = "20"  
        if h+":"+m not in timeTasks: timeTasks[h+":"+m] = [[team, "Remind"]]
        else: timeTasks[h+":"+m].append([team, "Remind"])
        saveFile("teams.yaml", teams)
        for i in teams[team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user = userRepository.get(i)
                bot.send_message(i, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞! –û–±—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–∞–∑–∞–ª–æ—Å—å <b>" + visualTime(int(time[:2]), user.timeZone) + ":" + time[3:] + "</b>", parse_mode="HTML")
        botLogging(id, "FCT_func: Team" + str(team) + ": " + time)
    else:
        botLogging(id, "FCT_func: Team" + str(team) + ": TimeNotFound")
        for i in teams[team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(i)
                user.t_GameByInvitation = True
                bot.send_message(i, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
                bot.send_message(i, "–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–∞–µ—Ç –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º. –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –∫–ª–∞–Ω–æ–≤—É—é –ª–∏–≥—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ö–õ‚öîÔ∏è</b>.", parse_mode="HTML", reply_markup=setKeyboard(i))


def saveButton(id): 
    user: User = userRepository.get(id)
    bot.edit_message_text(chat_id=id, message_id=user.t_MessageID, text='–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –≤–∞—à–∏ —Ç–∏–º–º–µ–π—Ç—ã —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.')
    for h in user.t_Dict:
        for t in range(len(user.t_Dict[h])):
            if user.t_Dict[h][t][0] == '‚úÖ': user.t_SelectedTimes.add(h+":"+user.t_Dict[h][t][1])
    botLogging(id, "SaveTable_Button: " + str(sorted(list(user.t_SelectedTimes))))
    saveFile("settings.yaml", settings)
    findCommonTime(id, user.team)


def noFreeTimeButton(id):
    user: User = userRepository.get(id)
    for i in teams[user.team]["users"]:
        if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            user2: User = userRepository.get(i)
            user2.t_GameByInvitation = True
            if user2.t_SelectedTimes == set(): bot.delete_message(i, user2.t_MessageID)
            if i != id: bot.send_message(i, "<b>" + user.nickname + "</b> –Ω–µ –Ω–∞—à—ë–ª —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω, –ø–æ—ç—Ç–æ–º—É —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–∞–µ—Ç –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º. –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –∫–ª–∞–Ω–æ–≤—É—é –ª–∏–≥—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ö–õ‚öîÔ∏è</b>.", parse_mode="HTML", reply_markup=setKeyboard(i))
            else: bot.send_message(i, "–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–∞–µ—Ç –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º. –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –∫–ª–∞–Ω–æ–≤—É—é –ª–∏–≥—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ö–õ‚öîÔ∏è</b>. ", parse_mode="HTML", reply_markup=setKeyboard(i))

def autoDelSuggestMessage(team):
    for i in suggestionsToPlay[team]["notAnswered"]:
        bot.edit_message_text(chat_id=i, message_id=suggestionsToPlay[team]["messageIDs"][i], text="<b>" + settings["user"][suggestionsToPlay[team]["owner"]]["Nickname"] + "</b> –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>", parse_mode="HTML")
    for i in teams[team]["users"]:
        if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            if i in suggestionsToPlay[team]["notAnswered"]: bot.send_message(i, "–í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            elif i != suggestionsToPlay[team]["owner"]: bot.send_message(i, "<b>" + settings["user"][suggestionsToPlay[team]["notAnswered"][0]]["Nickname"] + "</b> –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")
    if len(suggestionsToPlay[team]["notAnswered"]) == 1: bot.send_message(suggestionsToPlay[team]["owner"], "<b>" + settings["user"][suggestionsToPlay[team]["notAnswered"][0]]["Nickname"] + "</b> –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª —Ç–≤–æ—ë –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")
    else: bot.send_message(suggestionsToPlay[team]["owner"], "<b>" + settings["user"][suggestionsToPlay[team]["notAnswered"][0]]["Nickname"] + "</b> –∏ <b>" + settings["user"][suggestionsToPlay[team]["notAnswered"][1]]["Nickname"] + "</b> –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ—ë –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")

def suggestToPlay(team, owner):
    if battleDay is True:
        if team not in suggestionsToPlay:
            suggestionsToPlay[team] = {"owner": owner, "messageIDs": {}, "notAnswered": [], "timer": Timer(900, autoDelSuggestMessage, [team])}
            suggestionsToPlay[team]["timer"].start()
            if owner is not None: bot.send_message(owner, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–≤–æ–∏–º —Ç–∏–º–º–µ–π—Ç–∞–º. –ï—Å–ª–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç, –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            bot.send_message(owner, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ!")
            return
        if owner is None:
            for i in teams[team]["users"]:
                if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": 
                    suggestionsToPlay[team]["messageIDs"][i] = bot.send_message(i, "–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —Å—ã–≥—Ä–∞—Ç—å, –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É –∏ –æ–∂–∏–¥–∞–π –∫–æ–º–∞–Ω–¥—É.", parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup(row_width=2).add(types.InlineKeyboardButton("–ú–æ–≥—É —Å—ã–≥—Ä–∞—Ç—å", callback_data="9AcceptInvite"), types.InlineKeyboardButton("–ù–µ –º–æ–≥—É —Å—ã–≥—Ä–∞—Ç—å", callback_data="9DenyInvite"))).message_id
                    suggestionsToPlay[team]["notAnswered"].append(i)    
        else:
            user: User = userRepository.get(owner)
            for i in teams[team]["users"]:
                if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" and i != owner: 
                    suggestionsToPlay[team]["messageIDs"][i] = bot.send_message(i, "<b>" + user.nickname + "</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ–π—á–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É.", parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup(row_width=2).add(types.InlineKeyboardButton("–ú–æ–≥—É —Å—ã–≥—Ä–∞—Ç—å", callback_data="9AcceptInvite"), types.InlineKeyboardButton("–ù–µ –º–æ–≥—É —Å—ã–≥—Ä–∞—Ç—å", callback_data="9DenyInvite"))).message_id
                    suggestionsToPlay[user.team]["notAnswered"].append(i)
    else:
        bot.send_message(owner, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è!")

def clickToSuggest(id, answer):
    user: User = userRepository.get(id)
    suggestionsToPlay[user.team]["notAnswered"].remove(id)
    if answer == "AcceptInvite":
        if suggestionsToPlay[user.team]["owner"] is not None: bot.edit_message_text(chat_id=id, message_id=suggestionsToPlay[user.team]["messageIDs"][id], text="<b>" + settings["user"][suggestionsToPlay[user.team]["owner"]]["Nickname"] + "</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ–π—á–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>", parse_mode="HTML")
        else: bot.edit_message_text(chat_id=id, message_id=suggestionsToPlay[user.team]["messageIDs"][id], text="–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —Å—ã–≥—Ä–∞—Ç—å, –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É –∏ –æ–∂–∏–¥–∞–π –∫–æ–º–∞–Ω–¥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>", parse_mode="HTML")
        bot.send_message(id, "–û–∂–∏–¥–∞–π, –ø–æ–∫–∞ —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        for i in teams[user.team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                if i != id: 
                    bot.send_message(i, "<b>" + user.nickname + "</b> –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å", parse_mode="HTML")
        if suggestionsToPlay[user.team]["notAnswered"] == []: 
            for j in teams[user.team]["users"]:
                if j != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                    user: User = userRepository.get(j)
                    user.t_GameByInvitation = False
                    bot.send_message(j, "–í—Å—è –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ —Å—ã–≥—Ä–∞—Ç—å! –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É –∏ —É–Ω–∏—á—Ç–æ–∂–∞–π—Ç–µ —Å–≤–æ–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤üî•", reply_markup=setKeyboard(j))
            suggestionsToPlay[user.team]["timer"].cancel()
            del suggestionsToPlay[user.team]
    else:
        if suggestionsToPlay[user.team]["owner"] is not None: bot.edit_message_text(chat_id=id, message_id=suggestionsToPlay[user.team]["messageIDs"][id], text="<b>" + settings["user"][suggestionsToPlay[user.team]["owner"]]["Nickname"] + "</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ–π—á–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>", parse_mode="HTML")
        else: bot.edit_message_text(chat_id=id, message_id=suggestionsToPlay[user.team]["messageIDs"][id], text="–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —Å—ã–≥—Ä–∞—Ç—å, –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É –∏ –æ–∂–∏–¥–∞–π –∫–æ–º–∞–Ω–¥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>", parse_mode="HTML")
        for i in teams[user.team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                if i != id: bot.send_message(i, "<b>" + user.nickname + "</b> –Ω–µ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å", parse_mode="HTML") 
                bot.send_message(i, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ø–æ–∑–∂–µ.", reply_markup=setKeyboard(i))
                if suggestionsToPlay[user.team]["owner"] is not None and i in suggestionsToPlay[user.team]["notAnswered"]: bot.edit_message_text(chat_id=i, message_id=suggestionsToPlay[user.team]["messageIDs"][i], text="<b>" + settings["user"][suggestionsToPlay[user.team]["owner"]]["Nickname"] + "</b> –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", parse_mode="HTML")
                else: bot.edit_message_text(chat_id=i, message_id=suggestionsToPlay[user.team]["messageIDs"][i], text="–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —Ç–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —Å—ã–≥—Ä–∞—Ç—å, –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É –∏ –æ–∂–∏–¥–∞–π –∫–æ–º–∞–Ω–¥—É.\n \n <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", parse_mode="HTML")
                suggestionsToPlay[user.team]["timer"].cancel()
        del suggestionsToPlay[user.team]

@bot.message_handler(commands=["deltable"])        
def delTable(message):
    for i in teams.keys():
        for j in teams[i]['users']:
            if j != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": 
                user: User = userRepository.get(j)
                bot.delete_message(j, user.t_MessageID)   
                     
#–•–≠–ù–î–õ–ï–†–´ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∏–∫–æ–≤

@bot.message_handler(content_types=["text"])
def handleText(message):
    id = message.chat.id
    role = permission(id)
    user: User = userRepository.get(id)
    text = message.text
    if id > 0:
        LoggerBot.send_message(1193654237,  "<a href='tg://user?id=" + str(id) + "'>üë§ " + str(id) + "</a> | " + datetime.now().strftime("%H:%M:%S") + " | " +  text, parse_mode="HTML")
        if user.i_Status is False and text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µüë§": playerInfo(id) 
        elif user.j_Status is False and text == "–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±‚úâÔ∏è" and role == "User": join(id) 
        elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã‚úèÔ∏è" and (role == "Admin" or role == "Owner"): editTeams(id)
        elif text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤—É—é —Ä–∞–∑–Ω–∏—Ü—Éüåç" and role != "User": selectHourDifference(id)
        elif text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –ö–õ‚öîÔ∏è" and role != "User": suggestToPlay(user.team, id)
        elif text == "DayStart_func" and role == "Owner": dayStart("Wed")
        elif text == "CheckTable_func" and role == "Owner": checkTable()
        elif text == "EndOfTheDay_func" and role == "Owner": endOfTheDay()
        elif user.i_Status is True or user.j_Status is True: sendTag((text.upper()[1:] if text[0] == "#" else text.upper()), id)

@bot.callback_query_handler(func=lambda call: True)
def handleCallbacks(call):
    calltype = call.data[0]
    data = call.data[1:]
    if calltype == "+": acceptApplication(call.id, call.message.chat.id, call.message.message_id, call.from_user.first_name, int(data))
    elif calltype == "-": denyApplication(call.id, call.message.chat.id, call.message.message_id, call.from_user.first_name, int(data))
    elif calltype == "1": saveHourDifference(call.message.chat.id, data, call.message.message_id)
    elif calltype == "2": selectRowClick(call.message.chat.id, data, call.message.message_id)
    elif calltype == "3": selectTimeClick(call.message.chat.id, data[:2], int(data[2:]), call.message.message_id)
    elif calltype == "4": saveButton(call.message.chat.id)
    elif calltype == "5": choosePlayer(call.message.chat.id, int(data), call.message.message_id)
    elif calltype == "6": userToChange(call.message.chat.id, int(data), call.message.message_id)
    elif calltype == "7": changeResult(call.message.chat.id, data, call.message.message_id)
    elif calltype == "8": noFreeTimeButton(call.message.chat.id)
    elif calltype == "9": clickToSuggest(call.message.chat.id, data)
check()
botLogging("Program", "Bot launched in " + ("<b>TestMode</b>"if len(folder) == 9 else "<b>MainMode</b>"))
bot.infinity_polling(skip_pending=True)
